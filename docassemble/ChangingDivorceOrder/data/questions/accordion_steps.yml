id: final screen
decoration: pen-to-square
event: confirmation_and_download
question: |
  % if len(step_list) < 2:
  Get more information or help
  % else:
  # <i class="fa-thin fa-list"></i>Your Personal Action Plan is ready!
  % endif
subquestion: |
  
  % if len(step_list) < 2:
  For help with forms or understanding the process:
  <ul><li>Call the Family Law Self-Help Center
  <br>
  (907) 264-0851 or<br>  
  (866) 279-0851.</li>
  <li>See the courtâ€™s <a href="https://courts.alaska.gov/shc/family">Family Law Self-Help Center web pages</a>.</li>
  </ul>
  
  Many lawyers offer free or flat fee consultations without having to hire them for the whole case. [Find a Lawyer](https://courts.alaska.gov/shc/shclawyer.htm).
  
  Depending on your income, you may qualify for [Alaska Free Legal Answers](https://alaska.freelegalanswers.org).
  
  Depending on your income and circumstances, you may qualify for a free lawyer from [Alaska Legal Services](https://alsc-law.org/apply-for-services).
  % else:
  
  % if user_need in('change custody order','change foreign custody order'):
  #### Your Personal Action Plan for changing your custody or parenting plan in ${ len(step_list) } steps
  % elif user_need ==  'respond to custody':
  % if type_of_response == 'appeal':
  #### Your Personal Action Plan for responding to the appeal in ${ len(step_list) } steps
  % else:
  #### Your Personal Action Plan for responding to the motion in ${ len(step_list) } steps
  % endif 
  % endif
  % for iteration_index, step_tuple in enumerate( step_list ):
  ${ collapse_template(step_tuple[0], closed_icon="plus", open_icon="minus") }
  % endfor
  % endif
  ${ download_buttons_html(al_user_bundle) }
  
buttons:
  - Start over: restart
---
code: |
  # Temporarily disable why_change
  old_why_change = {
     'set aside clerical error': True,
     'set aside mistake of fact': True,
     'set aside new evidence': True,
     'set aside misconduct': True,
     'modify circumstances changed': True,
     'modify parent to jail': True,
     'modify domestic violence': True,
     'modify other change': True,
     'appeal legal mistake': True,
     'set aside new evidence': True,
  }

  step_list = []
  if len(step_list) >= 2:
    pdf_pap_multistep_subtitle = True
  images_list = []
  distribution_certificate_list = []
  other_party_in_case  = 'the other parent'
  case_type = 'custody'
  # certificate_of_service_image = ''
  distribution_certificate_list.append({'image': distrib_cert_custody_divorce_image, 'text': "Certificate of Distribution shows the date the court sent your order to you."})
  file_motion_to_set_aside = ''
  file_motion_to_enforce = ''
  file_modify_filing_fee = ''
  # expect_after_motion is in what to expect step for filing motion for interim order w complaint, or answer/response, cannot use variable in docx template, must insert condition in what to expect step.
  expect_after_motion = ''
  motion_type = 'motion'
  
  
  if user_need == 'none':
    step_list.append((wrong_tf, "wrong_tf_idx"))
    step_list.append((wrong_tf2, "wrong_tf2_idx"))
  
  elif user_need == 'respond to custody':
  
    # Row 2
    if type_of_response == 'custody':
      motion_type = 'Motion to Modify'
  
    # Rows 3 & 4
    #if type_of_response == 'custody' and not type_of_response == 'custody' :
    #  motion_type = 'Motion to Modify'
  
    # Row 5
    if type_of_response == 'reconsider' and respond_to_reconsider:
      step_list.append((respond_to_reconsider_step, "respond_to_reconsider_idx"))
      
    # Row 6
    if type_of_response == 'set aside':
      if not type_of_response == 'custody':
        motion_type = 'Motion to Set Aside Judgment or Order'
      
    # Rows 7 & 8
    #if type_of_response == 'set aside' and respond_to_set_aside in('some','none'):
    #  motion_type = 'Motion to Set Aside Judgment or Order'    
    
    if (type_of_response == 'custody' and respond_to_custody == 'agree') or (type_of_response == 'set aside' and respond_to_set_aside == 'agree'):
      step_list.append((let_court_party_know_you_agree_step, "let_court_party_know_you_agree_idx"))
    
    if type_of_response == 'custody' or type_of_response == 'set aside':
      step_list.append((respond_in_writing_step, "respond_in_writing_idx"))
      
    if type_of_response in('custody','set aside', 'reconsider' ):
      step_list.append((file_response_step, "file_response_idx"))
    
    if type_of_response == 'custody' or type_of_response =='set aside':
      step_list.append((expect_after_response_step, "expect_after_response_idx"))
      
    if (type_of_response == 'custody' and respond_to_custody == 'agree') or (type_of_response == 'set aside' and respond_to_set_aside == 'agree'):
      step_list.append((contact_other_party_step, "contact_other_party_idx"))    
      step_list.append((file_agreement_step, "file_agreement_idx"))
    
    # Row 9
    if type_of_response == 'appeal' and respond_to_appeal == 'agree':
      step_list.append((appeal_response_step, "appeal_response_idx"))
      step_list.append((appeal_contact_parent_step, "appeal_contact_parent_idx"))
      step_list.append((tell_supreme_court_step, "tell_supreme_court_idx"))
    
    # Rows 10 & 11
    if type_of_response =='appeal' and respond_to_appeal in('some','none'):
      step_list.append((appeal_response_step, "appeal_response_idx"))
  
  elif user_need == 'change foreign custody order':
    step_list.append((foreign_order_step, "foreign_order_idx"))
    step_list.append((ak_jurisdiction_step, "ak_jurisdiction_idx"))
    step_list.append((register_order_step, "register_order_idx"))
    step_list.append((modify_step, "modify_idx"))
    step_list.append((fill_modify_step, "fill_modify_idx"))
    step_list.append((calculate_child_support_step, "calculate_child_support_idx"))
    step_list.append((dont_wait_modify_custody_divorce_step, "dont_wait_modify_custody_divorce_idx"))
    images_list.append({'image': service_cert_modify_image, 'text': "Certificate of Service at the bottom of a Motion to Modify."})
    step_list.append((cert_of_service_step, "cert_of_service_idx"))
    file_step_heading = 'File your Motion to Modify'
    file_modify_filing_fee = '<li>Pay the $75 fee to file your Motion to Modify</li><ul><li>Call the <a href="https://courts.alaska.gov/shc/family">Family Law Self-HelpCenter</a><br>(907)264-0851, or<br>(866)279-0851,<br>or</li><li>Use <strong>Exemption From the Payment of Fees, TF-920</strong>[<a href="https://public.courts.alaska.gov/web/forms/docs/tf-920.pdf">Fill-In PDF</a>]</li></ul>'
    step_list.append((file_step, "file_idx"))
    step_list.append((serve_step, "serve_idx"))
    motion_type = 'Motion to Modify'
    step_list.append((expect_after_motion_step, "expect_after_motion_idx"))
    
  else:    
       ##################### middle of case
  
    # Row 12 remove confirmation of motion question and \ motion_decision
    if middle_of_case == 'yes' \
      and type_of_interim_order == 'motion' \
      and interim_order_date_within_10_days \
      and parents_agree:
        step_list.append((pick_a_step_step, "pick_a_step_idx"))
        step_list.append((parents_agree_step, "parents_agree_idx"))
        step_list.append((tell_the_court_step, "tell_the_court_idx"))
        step_list.append((learn_reconsider_step, "learn_reconsider_idx"))
        step_list.append((fill_reconsider_step, "fill_reconsider_idx"))
        images_list.append({'image': service_cert_reconsider_set_aside_image, 'text': "Certificate of Service at the bottom of the Motion to Reconsider"})
        step_list.append((cert_of_service_step, "cert_of_service_idx"))
        file_step_heading = 'File your Motion to Reconsider'
        step_list.append((file_step, "file_idx"))
        step_list.append((serve_step, "serve_idx"))
        step_list.append((expect_reconsider_step, "expect_reconsider_idx"))
   
    # Row 14 remove confirmation of standing order question \ and standing order
    if middle_of_case == 'yes' \
      and type_of_interim_order == 'standing order' \
      and parents_agree:
        step_list.append((pick_a_step_step, "pick_a_step_idx"))
        step_list.append((parents_agree_step, "parents_agree_idx"))
        step_list.append((tell_the_court_step, "tell_the_court_idx"))
        step_list.append((standing_order_step, "standing_order_idx")) 
        step_list.append((motion_forms_step, "motion_forms_idx"))
        images_list.append({'image': service_cert_motion_shc_1300_image, 'text': "Certificate of Service at the bottom of a motion."})
        step_list.append((cert_of_service_step, "cert_of_service_idx")) 
        step_list.append((file_step, "file_idx"))
        step_list.append((serve_step, "serve_idx"))
        step_list.append((expect_after_motion_step, "expect_after_motion_idx"))
    
    # Row 16 remove confirmation of motion question and \ motion_decision
    if middle_of_case == 'yes' \
      and type_of_interim_order == 'motion' \
      and interim_order_date_within_10_days \
      and not parents_agree:
        step_list.append((learn_reconsider_step, "learn_reconsider_idx"))
        step_list.append((fill_reconsider_step, "fill_reconsider_idx"))
        images_list.append({'image': service_cert_reconsider_set_aside_image, 'text': "Certificate of Service at the bottom of Motion to Reconsider and Motion to Set Aside."})
        step_list.append((cert_of_service_step, "cert_of_service_idx"))
        file_step_heading = 'File your Motion to Reconsider'
        step_list.append((file_step, "file_idx"))
        step_list.append((serve_step, "serve_idx"))
        step_list.append((expect_reconsider_step, "expect_reconsider_idx"))

    # Row 18 remove confirmation of standing order question \ and standing order
    if middle_of_case == 'yes' \
      and type_of_interim_order == 'standing order' \
      and not parents_agree:
        step_list.append((standing_order_step, "standing_order_idx")) 
        step_list.append((motion_forms_step, "motion_forms_idx"))
        images_list.append({'image': service_cert_motion_shc_1300_image, 'text': "Certificate of Service at the bottom of a motion."})
        step_list.append((cert_of_service_step, "cert_of_service_idx")) 
        step_list.append((file_step, "file_idx"))
        step_list.append((serve_step, "serve_idx"))
        step_list.append((expect_after_motion_step, "expect_after_motion_idx"))
    
    # Row 20 & 21
    if middle_of_case == 'yes' \
      and type_of_interim_order == 'motion' \
      and not interim_order_date_within_10_days: 
        if parents_agree:
          step_list.append((pick_a_step_step, "pick_a_step_idx"))
          step_list.append((parents_agree_step, "parents_agree_idx"))
          step_list.append((tell_the_court_step, "tell_the_court_idx"))
        step_list.append((modify_step, "modify_idx"))
        step_list.append((fill_modify_step, "fill_modify_idx"))
        step_list.append((calculate_child_support_step, "calculate_child_support_idx"))
        step_list.append((dont_wait_modify_custody_divorce_step, "dont_wait_modify_custody_divorce_idx"))
        images_list.append({'image': service_cert_modify_image, 'text': "Certificate of Service at the bottom of a Motion to Modify."})
        step_list.append((cert_of_service_step, "cert_of_service_idx"))
        file_step_heading = 'File your Motion to Modify'
        file_modify_filing_fee = ''
        step_list.append((file_step, "file_idx"))
        step_list.append((serve_step, "serve_idx"))
        motion_type = 'Motion to Modify'
        step_list.append((expect_after_motion_step, "expect_after_motion_idx"))
    

       ##################### after final order
       
    # removed confirmation question \ and motion_to_modify
    if middle_of_case == 'no' \
      and type_of_final_order['custody order'] \
      and why_change in('review', 'schedule'):
        if parents_agree:
          step_list.append((pick_a_step_step, "pick_a_step_idx"))
          step_list.append((parents_agree_step, "parents_agree_idx"))
          step_list.append((tell_the_court_step, "tell_the_court_idx"))
        step_list.append((modify_step, "modify_idx"))
        step_list.append((fill_modify_step, "fill_modify_idx"))
        step_list.append((calculate_child_support_step, "calculate_child_support_idx"))
        step_list.append((dont_wait_modify_custody_divorce_step, "dont_wait_modify_custody_divorce_idx"))
        images_list.append({'image': service_cert_modify_image, 'text': "Certificate of Service at the bottom of a Motion to Modify."})
        step_list.append((cert_of_service_step, "cert_of_service_idx"))
        file_step_heading = 'File your Motion to Modify'
        file_modify_filing_fee = '<li>Pay the $75 fee to file your Motion to Modify</li><ul><li>Call the <a href="https://courts.alaska.gov/shc/family">Family Law Self-HelpCenter</a><br>(907)264-0851, or<br>(866)279-0851,<br>or</li><li>Use <strong>Exemption From the Payment of Fees, TF-920</strong>[<a href="https://public.courts.alaska.gov/web/forms/docs/tf-920.pdf">Fill-In PDF</a>]</li></ul>'
        step_list.append((file_step, "file_idx"))
        step_list.append((serve_step, "serve_idx"))
        motion_type = 'Motion to Modify'
        step_list.append((expect_after_motion_step, "expect_after_motion_idx"))
    
    #  Rows 24 - 27
    if middle_of_case == 'no' \
      and ((type_of_final_order['custody order'] and why_change == 'problem') \
      or (type_of_final_order.any_true('property or debt','spousal support') and why_change_divorce_order == 'problem')) \
      and final_order_date_within_10_days:
        if parents_agree:
          step_list.append((pick_a_step_step, "pick_a_step_idx"))
          step_list.append((parents_agree_step, "parents_agree_idx"))
          step_list.append((tell_the_court_step, "tell_the_court_idx"))
        step_list.append((learn_reconsider_step, "learn_reconsider_idx"))
        step_list.append((fill_reconsider_step, "fill_reconsider_idx"))
        images_list.append({'image': service_cert_reconsider_set_aside_image, 'text': "Certificate of Service at the bottom of Motion to Reconsider and Motion to Set Aside."})
        step_list.append((cert_of_service_step, "cert_of_service_idx"))
        file_step_heading = 'File your Motion to Reconsider'
        step_list.append((file_step, "file_idx"))
        step_list.append((serve_step, "serve_idx"))
        step_list.append((expect_reconsider_step, "expect_reconsider_idx"))

    #  Rows 32  - 70 
    if middle_of_case == 'no' \
      and ((type_of_final_order['custody order'] and why_change == 'problem') \
      or (type_of_final_order.any_true('property or debt','spousal support') and why_change_divorce_order == 'problem')) \
      and final_order_date_within_15_days:
      if parents_agree:
        step_list.append((pick_a_step_step, "pick_a_step_idx"))
        step_list.append((parents_agree_step, "parents_agree_idx"))
        step_list.append((tell_the_court_step, "tell_the_court_idx"))
      if (type_of_final_order['custody order'] and why_change == 'problem'):
        step_list.append((appeal_step, "appeal_idx"))
      file_motion_to_set_aside = 'If you decide to file a <b>Motion to Set Aside</b>::'
      step_list.append((learn_set_aside_step, "learn_set_aside_idx"))   
      step_list.append((fill_set_aside_step, "fill_set_aside_idx"))
      images_list.append({'image': service_cert_reconsider_set_aside_image, 'text': "Certificate of Service at the bottom of the Motion to Set Aside."})
      step_list.append((cert_of_service_step, "cert_of_service_idx"))
      file_step_heading = 'File your Motion to Set Aside'
      step_list.append((file_step, "file_idx"))
      step_list.append((serve_step, "serve_idx"))
      motion_type = 'Motion to Set Aside'
      step_list.append((expect_after_motion_step, "expect_after_motion_idx"))
          

    ## Rows 71 - 91
    #if middle_of_case == 'no' \
    #  and why_change == 'problem' \
    #  and not final_order_date_within_10_days \
    #  and not final_order_date_within_15_days:
    #    if parents_agree:
    #      step_list.append((pick_a_step_step, "pick_a_step_idx"))
    #      step_list.append((parents_agree_step, "parents_agree_idx"))
    #      step_list.append((tell_the_court_step, "tell_the_court_idx"))
    #    else:
    #      if defined('final_order_period')  \
    #        and guess_final_order_date == 'unknown':
    #          if len(unknown_final_date.true_values()) > 1:
    #              step_list.append((pick_a_step_step, "pick_a_step_idx"))
    #  
    #    if (defined('final_order_period') \
    #      and not guess_final_order_date == 'unknown') \
    #      or (defined('final_order_date') \
    #      and date_difference(starting=final_order_date, ending=today()).days > 15):
    #            step_list.append((learn_set_aside_step, "learn_set_aside_idx"))
    #            step_list.append((fill_set_aside_step, "fill_set_aside_idx"))
    #            images_list.append({'image': service_cert_reconsider_set_aside_image, 'text': "Certificate of Service at the bottom of the Motion to Set Aside."})
    #            step_list.append((cert_of_service_step, "cert_of_service_idx"))
    #            file_step_heading = 'File your Motion to Set Aside'
    #            step_list.append((file_step, "file_idx"))
    #            step_list.append((serve_step, "serve_idx"))
    #            motion_type = 'Motion to Set Aside'
    #            step_list.append((expect_after_motion_step, "expect_after_motion_idx"))

    #    if defined('final_order_period') \
    #      and guess_final_order_date == 'unknown':
    #        if unknown_final_date['appeal']:                
    #          step_list.append((appeal_step, "appeal_idx"))
    #        if unknown_final_date['reconsider']:
    #          step_list.append((learn_reconsider_step, "learn_reconsider_idx"))
    #          step_list.append((fill_reconsider_step, "fill_reconsider_idx"))
    #        if unknown_final_date['set aside']:
    #          step_list.append((learn_set_aside_step, "learn_set_aside_idx"))
    #          step_list.append((fill_set_aside_step, "fill_set_aside_idx"))
    #        if unknown_final_date.any_true('reconsider','set aside'):
    #          images_list.append({'image': service_cert_reconsider_set_aside_image, 'text': "Certificate of Service at the bottom of the Motion to Reconsider and the Motion to Set Aside."})
    #          step_list.append((cert_of_service_step, "cert_of_service_idx"))
    #          if not unknown_final_date['set aside']:
    #            file_step_heading = 'File your Motion to Reconsider'
    #          elif not unknown_final_date['reconsider']:
    #            file_step_heading = 'File your Motion to Set Aside'
    #          step_list.append((file_step, "file_idx"))
    #          step_list.append((serve_step, "serve_idx"))
    #          if unknown_final_date['reconsider']:
    #            step_list.append((expect_reconsider_step, "expect_reconsider_idx"))
    #          if unknown_final_date['set aside']:
    #            motion_type = 'Motion to Set Aside'
    #            step_list.append((expect_after_motion_step, "expect_after_motion_idx"))
       
    
  step_list.append((get_help, "get_help_idx"))
    
  for iter_idx, step_tuple in enumerate( step_list ):
    define(step_tuple[ 1 ], iter_idx + 1)
  get_steps = True
---

